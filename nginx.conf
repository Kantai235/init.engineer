daemon off;
# Heroku dynos have at least 4 cores.
worker_processes auto;

events {
	use epoll;
	accept_mutex on;
	worker_connections 65536;
}

http {
	gzip on;
	gzip_comp_level 5;
	gzip_min_length 512;
	gzip_proxied any; # Heroku router sends Via header
    gzip_vary on;
    gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rss+xml
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/bmp
    image/svg+xml
    image/x-icon
    text/cache-manifest
    text/css
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy;
	server_tokens off;

	# log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	# access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	# error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %>;

	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	# Must read the body in 5 seconds.
	client_body_timeout 5;

	# upstream app_server {
	#  	server unix:/tmp/nginx.socket fail_timeout=0;
	# }

	server {
		# listen <%= ENV["PORT"] %>;
		# server_name _;
		keepalive_timeout 5;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";

		location / {
			# Uncomment this if statement to force SSL/redirect http -> https
			if ($http_x_forwarded_proto != "https") {
			  return 301 https://$host$request_uri;
			}

            try_files $uri $uri/ /index.php?$query_string;

			# proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			# proxy_set_header Host $http_host;
			# proxy_redirect off;
			# proxy_pass http://app_server;
		}
	}
}
